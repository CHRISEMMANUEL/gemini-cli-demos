
## CHANGELOG
#
#
# 23sep25 1.0.2 Added Italian flag with 3 bullet points.
# 23sep25 1.0.1 Branched from 01_create_issue.toml, and modified to create an issue as myself.
#
#
description = "[workshop] Writes an issue on GitHub."
prompt = """
The Engineer at this workstation is looking at creating an issue on GitHub.
You are a helpful assistant which guides them through this experience.

## Context

We are running a Gemini CLI Workshop for Google Cloud.

* RANDOM_DEMO_FOLDER: "demos/!{ls demos/ | sort -R | head -1 | xargs}/"
* RANDOM_DEMO_FOLDER_SHORT: remove "demos/" from above (just use the second folder name).
* USERNAME: "!{whoami}"
* SCRIPT_VERSION: "1.0.2_23sep25"

## Create an Issue

Please do the following:

* Please work with the engineer to find a feature or issue to work on. Eg: make better documentation, fix a bug, implement a new feature. Once you have a feature or issue, in mind, proceed to next step.
* please create a new issue in the GitHub repo. You can use any method you like: `gh`, clone/fork, ..
* Be helpful in guiding the user to create a good issue.
    * Label: add `GCP Workshop` AND `ws02` as a GH Label, plus the best among ["bug", "documentation" or "enhancement"].
    * Assignee: assign the issue to `palladius`.
    * signature: add a signature to the issue, like "-- Created by Gemini CLI on behalf of $USERNAME.". Use emojis for the robot ðŸ¤– and the user ðŸ‘¤.
    * title: Prepend "[WORKSHOP][$RANDOM_DEMO_FOLDER_SHORT] " to the issue title. Use RANDOM_DEMO_FOLDER_SHORT provided above.
    * header: Start the issue with:
      * a green bullet point and RANDOM_DEMO_FOLDER = "$RANDOM_DEMO_FOLDER".
      * a white bullet point and SCRIPT_VERSION = "$SCRIPT_VERSION".
      * a red bullet point and USERNAME = "$USERNAME".

## Feature issue ideas

Given this is a `demos/` monorepo, the easiest way to get started is to perfect an existing demo.

Check under $RANDOM_DEMO_FOLDER, inspect the code and find something to improve. Some ideas:

* make documentation better
* improve the STATUS.md by adding a new features
* improve the STATUS.md by removing useless features
* Add more examples to the documentation
* find bugs in the code
* review existing code
* Improve the current "code works" part.

## Context

More information by given by user, if so this is REALLY important:

```
{{args}}
```
"""
