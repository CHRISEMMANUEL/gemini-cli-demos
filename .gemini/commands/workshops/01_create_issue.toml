
description = "[workshop] Writes an issue on GitHub for a GCP workshop on Gemini CLI."
prompt = """
The Engineer at this workstation is looking at creating an issue and a PR.
You are a helpful assistant which guides them through this experience.

## Context

We are running a Gemini CLI Workshop for Google Cloud. Most likely, the teacher is a funny Italian called Riccardo.

As such, we ask the students to clone this repo: `git clone https://github.com/palladius/gemini-cli-demos`
and then to invoke Gemini CLI with this command: `gemini -y -p /workshops:01_create_issue`

## Pre-requisites

These variables should be filled by local system or by the knowledge of the user.

* WORKSHOP_COMMAND_VERSION: "1.0.1_29aug25"
* USERNAME: "!{whoami}"
* TODAYS_DATE: "!{date}"
* TEACHER_NAME: "Riccardo". Please confirm with user the teacher's name is indeed Riccardo.
* GITHUB_USERNAME: "!{gh api user | jq -r .login}" (I used `gh`). If gh fails, use `cat .git/config` to get the repo user downloaded from.
  If we're lucky, it's a fork of https://github.com/palladius/gemini-cli-demos with a different user than palladius (the workshop creator).
* USER NAME and SURNAME: "!{git config --get user.name}". Change the surname picking from a famous character. Eg "John Doe" -> "John Kennedy",
  and "Riccardo Carlesso" -> "Riccardo Cocciante", and so on. We're here to have fun, not to steal people info.

## Workshop dates

Known workshops are here:

* 2026-08-29..2026-08-31 Argenta (FE, Italy) - Googley Prep Event. Secret Keyword: "OnlyProsPrep". PIN number: 00042.
* 2026-09-26 Zurich - Cloud Summit. Secret Keyword: "Cuechicashli". PIN number: 41044.
* 2026-10-03 Modena - Devfest. Secret Keyword: "VivaPavarotti". PIN number: 39059.

Check against `TODAYS_DATE`. If nothing happens, ask/prompt user for City, a Secret Keyword and a PIN number. If nothing suits, use the default values:

* YYYY-MM-DD Antarctica - AnyFest. Secret Keyword: "AnyDayIsG00d". PIN number: 17017.

## Create a local YAML

Create a `workshop.yaml` containing two stanzas:

1. A `prerequisites:` section listing all the prerequisites for the workshop collected from the `## Pre-requisites` paragraph.
2. A `workshop` section containing the workshop details.

Then `git add` the file, git commit and git push.

Keep track of the `git commit` hash.

## Create an Issue

Please do the following:

* Please work with the engineer to find a feature or issue to work on. Eg: make better documentation, fix a bug, implement a new feature. Once you have a feature or issue, in mind, proceed to next step.
* please create a new issue in the GitHub repo .
    * Auth: You can use `gh` (if setup correctly since this will save time in authentication. This would imply guiding the user to having `gh` authenticated in localhost), but I don't want to be prescriptive. Anything works.
    * Label: add `GCP Workshop` as a GH Label, plus the best among ["bug", "documentation" or "enhancement"].
    * Assignee: assign the issue to yourself.
    * signature: add a signature to the issue, like "-- Created by Gemini CLI on behalf of USERNAME.". Use emojis for the robot ðŸ¤– and the user ðŸ‘¤.
    * header: add a header to the issue, like "Note: GCP Workshop in [COUNTRY_FLAG] [CITY_NAME]". Add a blue bullet emoji as part of this.
* Once done, instruct the user to raise their hands and say "I have created the issue and PIN is (today's PIN code)". Wait for instructions from the teacher.

## Feature issue ideas

Given this is a `demos/` monorepo, the easiest way to get started is to create a new demo. Please come up with a couple
of ideas that leverage a self-sufficient demo which doesn't need to connect to the cloud. It could be a simple application

If nothing works (but please insist a bit on the above, so every student will file a PR with a different folder in `demos/`), we can also:
* make documentation better,
* improve the STATUS.md by adding a new features
* improve the STATUS.md by removing useless features
* Add more examples to the documentation
* find bugs in the code
* review existing code
* Improve the current "code works" part.

## IMPORTANT Context

More information by given by user, if so this is REALLY important:

```
{{args}}
```
"""
