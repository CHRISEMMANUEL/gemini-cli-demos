
import gspread
import pandas as pd
import os
import socket
import re
from datetime import datetime
from google.auth import default
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials

# --- Configuration ---
SPREADSHEET_NAME = "people_and_orders"
CSV_DIR = "output"
SQL_FILE = "create_database.sql"
# --- Your email address ---
# --- IMPORTANT: Please replace with your email address ---
EMAIL = "riccardo.carlesso@gmail.com"


def get_credentials():
    """Get credentials using gcloud's user authentication."""
    creds, _ = default()
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
    return creds

def parse_sql_schema(sql_file):
    """Parses the SQL file to extract table schemas."""
    with open(sql_file, 'r') as f:
        content = f.read()

    schema = {}
    create_table_statements = re.findall(r'CREATE TABLE (\w+) \((.*?)\);', content, re.DOTALL)

    for table_name, table_content in create_table_statements:
        pks = re.findall(r'(\w+) INTEGER PRIMARY KEY', table_content) or re.findall(r'(\w+) TEXT PRIMARY KEY', table_content)
        fks = re.findall(r'FOREIGN KEY\((\w+)\)', table_content)
        schema[table_name] = {'pks': pks, 'fks': fks}

    return schema


def main():
    """Main function to upload CSVs to Google Sheets."""
    creds = get_credentials()
    gc = gspread.authorize(creds)
    schema = parse_sql_schema(SQL_FILE)

    # --- Get or create the spreadsheet ---
    try:
        spreadsheet = gc.open(SPREADSHEET_NAME)
        print(f"Spreadsheet '{SPREADSHEET_NAME}' found.")
    except gspread.exceptions.SpreadsheetNotFound:
        spreadsheet = gc.create(SPREADSHEET_NAME)
        print(f"Spreadsheet '{SPREADSHEET_NAME}' created.")
        spreadsheet.share(EMAIL, perm_type='user', role='writer')
        print(f"Spreadsheet shared with {EMAIL}")

    # --- Add Synopsis sheet ---
    try:
        synopsis_sheet = spreadsheet.worksheet("Synopsis")
        synopsis_sheet.clear()
        print("Cleared Synopsis sheet.")
    except gspread.exceptions.WorksheetNotFound:
        synopsis_sheet = spreadsheet.add_worksheet(title="Synopsis", rows=10, cols=2)
        print("Created Synopsis sheet.")
        # --- Delete the default "Sheet1" if it exists ---
        try:
            default_sheet = spreadsheet.worksheet("Sheet1")
            spreadsheet.del_worksheet(default_sheet)
            print("Deleted default 'Sheet1'.")
        except gspread.exceptions.WorksheetNotFound:
            pass # It's already gone, no worries


    synopsis_data = [
        ["Synopsis for:", SPREADSHEET_NAME],
        ["Generated by:", os.path.abspath(__file__)],
        ["Hostname:", socket.gethostname()],
        ["Path:", os.getcwd()],
        ["Last Updated:", datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
    ]
    synopsis_sheet.update(synopsis_data)
    synopsis_sheet.format('A1:A5', {'textFormat': {'bold': True}})
    spreadsheet.reorder_worksheets([synopsis_sheet])
    print("Updated Synopsis sheet.")


    # --- Upload each CSV as a new sheet ---
    for filename in os.listdir(CSV_DIR):
        if filename.endswith(".csv"):
            table_name = os.path.splitext(filename)[0]
            csv_path = os.path.join(CSV_DIR, filename)

            print(f"Processing {csv_path}...")

            # --- Clear the sheet if it exists ---
            try:
                worksheet = spreadsheet.worksheet(table_name)
                worksheet.clear()
                print(f"Cleared sheet: {table_name}")
            except gspread.exceptions.WorksheetNotFound:
                worksheet = spreadsheet.add_worksheet(title=table_name, rows=1, cols=1)
                print(f"Created new sheet: {table_name}")


            # --- Upload the CSV data ---
            df = pd.read_csv(csv_path)
            worksheet.update([df.columns.values.tolist()] + df.values.tolist())
            print(f"Uploaded data to sheet: {table_name}")

            # --- Format the header ---
            header_formats = []
            for i, col_name in enumerate(df.columns):
                cell_format = {'textFormat': {'bold': True}}
                if col_name in schema.get(table_name, {}).get('pks', []):
                    cell_format['textFormat']['underline'] = True
                if col_name in schema.get(table_name, {}).get('fks', []):
                    cell_format['textFormat']['italic'] = True
                header_formats.append({'range': gspread.utils.rowcol_to_a1(1, i + 1), 'format': cell_format})

            if header_formats:
                worksheet.batch_format(header_formats)
                print(f"Formatted header for sheet: {table_name}")


if __name__ == "__main__":
    main()
