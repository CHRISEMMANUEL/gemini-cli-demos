

import os
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build


# Define the scopes
SCOPES = ['https://www.googleapis.com/auth/presentations']

def main():
    """Creates a Google Slides presentation."""
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        flow = InstalledAppFlow.from_client_secrets_file(
            'credentials.json', SCOPES)
        creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.json', 'w') as token:
            token.write(creds.to_json())

    service = build('slides', 'v1', credentials=creds)

    # Create the presentation
    presentation = service.presentations().create(body={
        'title': 'Gemini CLI Demos'
    }).execute()

    presentation_id = presentation.get('presentationId')
    first_slide = presentation.get('slides')[0]
    first_slide_id = first_slide.get('objectId')
    title_placeholder_id = None
    for element in first_slide.get('pageElements'):
        if element.get('shape', {}).get('placeholder', {}).get('type') == 'CENTERED_TITLE':
            title_placeholder_id = element.get('objectId')
            break

    # Add slides
    slides_data = [
        {
            'objectId': 'intent_slide',
            'layout': 'TITLE_AND_BODY',
            'title': 'Repository Intent',
            'body': 'This repository contains Demos-in-a-box for Gemini CLI.'
        },
        {
            'objectId': 'auto_slide_creator_slide',
            'layout': 'TITLE_AND_BODY',
            'title': 'Auto Slide Creator',
            'body': 'This demo showcases how `gemini-cli` is able to:\n\n* Create Google Slides\n* Generate E/R schema based on it.'
        },
        {
            'objectId': 'git_investigation_slide',
            'layout': 'TITLE_AND_BODY',
            'title': 'Git Investigation',
            'body': 'This demo will showcase git investigation capabilities.'
        },
        {
            'objectId': 'sqlite_investigation_slide',
            'layout': 'TITLE_AND_BODY',
            'title': 'SQLite Investigation',
            'body': 'This demo showcases how `gemini-cli` is able to:\n* read/write/understand a sqlite3.\n* Generate E/R schema based on it.'
        },
        {
            'objectId': 'thank_you_slide',
            'layout': 'TITLE_AND_BODY',
            'title': 'Thank you!',
            'body': 'Generated by gemini-cli + auto-slide-creator'
        }
    ]

    if title_placeholder_id:
        title_requests = [
            {
                'insertText': {
                    'objectId': title_placeholder_id,
                    'text': 'Gemini CLI Demos'
                }
            }
        ]
        body = {
            'requests': title_requests
        }
        service.presentations().batchUpdate(
            presentationId=presentation_id, body=body).execute()
    else:
        print("Could not find title placeholder on the first slide.")

    slide_requests = []
    for i, slide in enumerate(slides_data):
        slide_id = f"slide_{i}"
        title_id = f"title_{i}"
        body_id = f"body_{i}"

        placeholder_id_mappings = []
        if slide['layout'] == 'TITLE':
            placeholder_id_mappings.append({
                'layoutPlaceholder': {
                    'type': 'CENTERED_TITLE'
                },
                'objectId': title_id
            })
        elif slide['layout'] == 'TITLE_AND_BODY':
            placeholder_id_mappings.extend([
                {
                    'layoutPlaceholder': {
                        'type': 'TITLE'
                    },
                    'objectId': title_id
                },
                {
                    'layoutPlaceholder': {
                        'type': 'BODY'
                    },
                    'objectId': body_id
                }
            ])

        slide_requests.append({
            'createSlide': {
                'objectId': slide_id,
                'slideLayoutReference': {
                    'predefinedLayout': slide['layout']
                },
                'placeholderIdMappings': placeholder_id_mappings
            }
        })

        if slide['title']:
            slide_requests.append({
                'insertText': {
                    'objectId': title_id,
                    'text': slide['title']
                }
            })
        if slide['body']:
            slide_requests.append({
                'insertText': {
                    'objectId': body_id,
                    'text': slide['body']
                }
            })
        if slide['objectId'] == 'sqlite_investigation_slide':
            slide_requests.append({
                'createImage': {
                    'url': 'https://i.imgur.com/4YjD2jO.png',
                    'elementProperties': {
                        'pageObjectId': slide_id,
                        'size': {
                            'height': {
                                'magnitude': 3000000,
                                'unit': 'EMU'
                            },
                            'width': {
                                'magnitude': 3000000,
                                'unit': 'EMU'
                            }
                        },
                        'transform': {
                            'scaleX': 1,
                            'scaleY': 1,
                            'translateX': 4000000,
                            'translateY': 2000000,
                            'unit': 'EMU'
                        }
                    }
                }
            })

    if slide_requests:
        body = {'requests': slide_requests}
        service.presentations().batchUpdate(presentationId=presentation_id, body=body).execute()

    print(f"Created presentation with ID: {presentation_id}")

if __name__ == '__main__':
    main()

